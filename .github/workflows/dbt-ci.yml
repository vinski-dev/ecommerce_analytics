name: dbt CI

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:  # Allow manual triggering

env:
  DBT_PROFILES_DIR: ./  # Set dbt profiles directory
  PYTHONUNBUFFERED: "1"  # Ensure real-time output

jobs:
  build:
    name: Build and Test DBT
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12']
      fail-fast: false  # Continue other jobs even if one fails
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper git operations

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Cache pip dependencies

      - name: Create virtual environment
        run: python -m venv .venv

      - name: Upgrade pip
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./.venv/Scripts/python.exe -m pip install --upgrade pip setuptools wheel
          else
            ./.venv/bin/python -m pip install --upgrade pip setuptools wheel
          fi
        shell: bash

      - name: Install dependencies
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            PYTHON_EXEC="./.venv/Scripts/python.exe"
            PIP_EXEC="./.venv/Scripts/pip.exe"
          else
            PYTHON_EXEC="./.venv/bin/python"
            PIP_EXEC="./.venv/bin/pip"
          fi
          
          if [ -f requirements.txt ]; then
            echo "✅ Found requirements.txt — installing dependencies..."
            $PIP_EXEC install -r requirements.txt
          elif [ -f requirements-dev.txt ]; then
            echo "✅ Found requirements-dev.txt — installing dev dependencies..."
            $PIP_EXEC install -r requirements-dev.txt
          else
            echo "⚠️ No requirements file found — installing dbt packages directly"
            $PIP_EXEC install dbt-core dbt-postgres dbt-snowflake dbt-bigquery
          fi
          
          # Install additional testing/linting tools
          $PIP_EXEC install sqlfluff pytest dbt-expectations
          
          echo "📦 Installed packages:"
          $PIP_EXEC list
        shell: bash

      - name: Cache dbt packages
        uses: actions/cache@v3
        with:
          path: |
            dbt_packages
            ~/.dbt
          key: ${{ runner.os }}-dbt-${{ hashFiles('**/packages.yml') }}
          restore-keys: |
            ${{ runner.os }}-dbt-

      - name: dbt debug (connection test)
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            ./.venv/Scripts/dbt.exe debug
          else
            ./.venv/bin/dbt debug
          fi
        shell: bash
        continue-on-error: true  # Don't fail if no profile is configured

      - name: Install dbt packages
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            DBT_EXEC="./.venv/Scripts/dbt.exe"
          else
            DBT_EXEC="./.venv/bin/dbt"
          fi
          
          if [ -f packages.yml ] || [ -f dependencies.yml ]; then
            echo "📦 Installing dbt packages..."
            $DBT_EXEC deps
          else
            echo "ℹ️ No packages.yml found, skipping dbt deps"
          fi
        shell: bash

      - name: Lint SQL with sqlfluff
        if: runner.os == 'Linux'  # SQLFluff works best on Linux
        run: |
          if [ -f .sqlfluff ]; then
            echo "🔍 Running SQLFluff linter..."
            ./.venv/bin/sqlfluff lint models/ --format github-annotation
          else
            echo "ℹ️ No .sqlfluff config found, skipping linting"
          fi
        shell: bash
        continue-on-error: true

      - name: dbt compile
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            DBT_EXEC="./.venv/Scripts/dbt.exe"
          else
            DBT_EXEC="./.venv/bin/dbt"
          fi
          
          echo "🔨 Compiling dbt models..."
          $DBT_EXEC compile
        shell: bash
        continue-on-error: true

      - name: dbt run
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            DBT_EXEC="./.venv/Scripts/dbt.exe"
          else
            DBT_EXEC="./.venv/bin/dbt"
          fi
          
          echo "🚀 Running dbt models..."
          $DBT_EXEC run --profiles-dir .
        shell: bash
        continue-on-error: true

      - name: dbt test
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            DBT_EXEC="./.venv/Scripts/dbt.exe"
          else
            DBT_EXEC="./.venv/bin/dbt"
          fi
          
          echo "🧪 Running dbt tests..."
          $DBT_EXEC test --profiles-dir .
        shell: bash
        continue-on-error: true

      - name: dbt snapshot
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            DBT_EXEC="./.venv/Scripts/dbt.exe"
          else
            DBT_EXEC="./.venv/bin/dbt"
          fi
          
          echo "📸 Running dbt snapshots..."
          $DBT_EXEC snapshot --profiles-dir .
        shell: bash
        continue-on-error: true

      - name: Generate dbt docs
        if: runner.os == 'Linux' && github.event_name == 'push'
        run: |
          echo "📚 Generating dbt documentation..."
          ./.venv/bin/dbt docs generate --profiles-dir .
          
          # Create docs directory if it doesn't exist
          mkdir -p ./target/docs
          
          # Copy generated docs to a known location
          if [ -d "./target" ]; then
            cp -r ./target/* ./target/docs/ 2>/dev/null || true
          fi
        shell: bash
        continue-on-error: true

      - name: Upload dbt artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dbt-artifacts-${{ matrix.os }}
          path: |
            target/
            logs/
            dbt_packages/
          retention-days: 7

      - name: Upload test results
        if: always() && runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            target/run_results.json
            target/manifest.json
          retention-days: 30

  slack-notification:
    name: Notify Slack
    needs: build
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            DBT CI Pipeline ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true